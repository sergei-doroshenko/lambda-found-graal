plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'software.amazon.awssdk:s3:2.13.31'
    implementation 'software.amazon.awssdk:url-connection-client:2.13.31'
    configurations.all {
        exclude group: 'software.amazon.awssdk', module: 'apache-client'
        exclude group: 'software.amazon.awssdk', module: 'netty-nio-client'
    }

//    implementation 'aws-lambda-java-runtime-interface-client:2.1.1'
    implementation 'com.formkiq:lambda-runtime-graalvm:1.1'
    implementation 'org.slf4j:slf4j-simple:1.7.26'

    testImplementation 'junit:junit:4.13.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.formkiq.lambda.runtime.graalvm.LambdaRuntime'
    }
}

sourceCompatibility = 11
targetCompatibility = 11

task buildGraalVMImage {
    inputs.files("${project.projectDir}/src/main", configurations.compileClasspath)
    outputs.upToDateWhen {file("${buildDir}/graalvm/server").exists()}
    outputs.file file("${buildDir}/graalvm/server")

    doLast {
        exec {
            commandLine "bash", "-c", "./build_graalvm.sh"
        }
    }
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
//    into('lib') {
//        from configurations.runtime
//    }
    archiveName 'distributive.zip'
//    destinationDir(file('/dir1/dir2/dir3/'))
}

buildGraalVMImage.dependsOn shadowJar, test
build.dependsOn buildGraalVMImage
